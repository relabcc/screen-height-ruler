{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","size","setSize","onResize","bounds","measureRef","ref","style","height","overflow","range","Math","floor","map","d","className","width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QA2BeA,MAtBf,WACE,MAAwBC,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KACA,OACE,cAAC,IAAD,CAASC,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBF,EAAQE,IAASA,QAAM,EAA1D,SACG,gBAAGC,EAAH,EAAGA,WAAH,OACC,qBAAKC,IAAKD,EAAYE,MAAO,CAAEC,OAAQ,OAAQC,SAAU,UAAzD,SACGR,GAAQA,EAAKO,QACZ,qCACGE,IAAM,EAAGC,KAAKC,MAAMX,EAAKO,QAAS,IAAIK,KAAI,SAAAC,GAAC,OAC1C,qBAAaP,MAAO,CAAEC,OAAQ,IAAMO,UAAS,eAAUD,EAAI,MAAQ,GAAK,SAAxE,SACGA,EAAI,GAAK,sBAAKC,UAAU,QAAf,UAAwBD,EAAxB,SADFA,MAIZ,sBAAKC,UAAU,OAAf,UAAuBJ,KAAKC,MAAMX,EAAKe,OAAvC,QAAoDL,KAAKC,MAAMX,EAAKO,QAApE,iBCNCS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7616e8ce.chunk.js","sourcesContent":["import { useState } from 'react';\nimport Measure from 'react-measure';\nimport range from 'lodash/range'\nimport './App.css';\n\nfunction App() {\n  const [size, setSize] = useState()\n  return (\n    <Measure onResize={({ bounds }) => setSize(bounds)} bounds>\n      {({ measureRef }) => (\n        <div ref={measureRef} style={{ height: '100%', overflow: 'hidden' }}>\n          {size && size.height && (\n            <>\n              {range(0, Math.floor(size.height), 50).map(d => (\n                <div key={d} style={{ height: 50 }} className={`tick ${d % 100 === 0 && 'major'}`}>\n                  {d > 0 && <div className=\"label\">{d}px</div>}\n                </div>\n              ))}\n              <div className=\"size\">{Math.floor(size.width)}px x {Math.floor(size.height)}px</div>\n            </>\n          )}\n        </div>\n      )}\n    </Measure>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}