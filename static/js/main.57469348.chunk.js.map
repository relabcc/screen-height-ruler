{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","size","setSize","x2","setX2","vh","setVh","onResize","bounds","measureRef","ref","style","height","overflow","backgroundColor","range","Math","floor","map","d","className","type","name","onChange","e","target","checked","width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAuCeA,MAlCf,WACE,MAAwBC,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAoBF,qBAApB,mBAAOG,EAAP,KAAWC,EAAX,KACA,EAAoBJ,qBAApB,mBAAOK,EAAP,KAAWC,EAAX,KACA,OACE,cAAC,IAAD,CAASC,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBN,EAAQM,IAASA,QAAM,EAA1D,SACG,gBAAGC,EAAH,EAAGA,WAAH,OACC,qBAAKC,IAAKD,EAAYE,MAAO,CAAEC,OAAO,GAAD,OAAKT,EAAK,EAAI,EAAd,aAAoBE,EAAK,KAAO,KAAOQ,SAAU,SAAUC,gBAAiB,SAAjH,SACGb,GAAQA,EAAKW,QACZ,qCACGG,IAAM,EAAGC,KAAKC,MAAMhB,EAAKW,QAAS,IAAIM,KAAI,SAAAC,GAAC,OAC1C,qBAAaR,MAAO,CAAEC,OAAQ,IAAMQ,UAAS,eAAUD,EAAI,MAAQ,GAAK,SAAxE,SACGA,EAAI,GAAK,sBAAKC,UAAU,QAAf,UAAwBD,EAAxB,SADFA,MAIZ,sBAAKC,UAAU,OAAf,UACE,kCACE,uBAAOC,KAAK,WAAWC,KAAK,KAAKC,SAAU,SAACC,GAAD,OAAOpB,EAAMoB,EAAEC,OAAOC,UAAUA,QAASvB,IADtF,eAIA,kCACE,uBAAOkB,KAAK,WAAWC,KAAK,KAAKC,SAAU,SAACC,GAAD,OAAOlB,EAAMkB,EAAEC,OAAOC,UAAUA,QAASrB,IADtF,YAICW,KAAKC,MAAMhB,EAAK0B,OATnB,QASgCX,KAAKC,MAAMhB,EAAKW,QAThD,iBCRCgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.57469348.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport Measure from 'react-measure';\r\nimport range from 'lodash/range'\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [size, setSize] = useState()\r\n  const [x2, setX2] = useState()\r\n  const [vh, setVh] = useState()\r\n  return (\r\n    <Measure onResize={({ bounds }) => setSize(bounds)} bounds>\r\n      {({ measureRef }) => (\r\n        <div ref={measureRef} style={{ height: `${x2 ? 2 : 1}00${vh ? 'vh' : '%'}`, overflow: 'hidden', backgroundColor: 'beige' }}>\r\n          {size && size.height && (\r\n            <>\r\n              {range(0, Math.floor(size.height), 50).map(d => (\r\n                <div key={d} style={{ height: 50 }} className={`tick ${d % 100 === 0 && 'major'}`}>\r\n                  {d > 0 && <div className=\"label\">{d}px</div>}\r\n                </div>\r\n              ))}\r\n              <div className=\"size\">\r\n                <label>\r\n                  <input type=\"checkbox\" name=\"x2\" onChange={(e) => setX2(e.target.checked)} checked={x2} />\r\n                  2x height\r\n                </label>\r\n                <label>\r\n                  <input type=\"checkbox\" name=\"vh\" onChange={(e) => setVh(e.target.checked)} checked={vh} />\r\n                  use vh\r\n                </label>\r\n                {Math.floor(size.width)}px x {Math.floor(size.height)}px\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n    </Measure>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}